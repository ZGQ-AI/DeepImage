---
alwaysApply: false
---
# 数据库设计方法论

## 设计哲学

数据库设计是业务逻辑的抽象表达，核心目标是**在保证数据完整性的前提下，最大化查询性能和维护效率**。

## 六大设计原则

### 1. 一致性原则
**核心思想**: 统一的命名、类型和结构规范，降低认知成本

**关键要点**:
- 命名规范：主键统一为`id`，外键为`{table}_id`，时间字段为`created_at/updated_at`
- 类型规范：主键用`BIGSERIAL`，状态字段用`SMALLINT`，时间用`TIMESTAMP WITH TIME ZONE`
- 结构规范：所有表包含`delete_flag`、`created_at`、`updated_at`等标准字段

**决策指导**: 当面临命名或类型选择时，优先考虑与现有规范的统一性

### 2. 完整性原则
**核心思想**: 通过约束和业务逻辑保证数据的准确性和一致性

**关键要点**:
- 数据完整性：使用`UNIQUE`、`NOT NULL`等约束防止无效数据
- 业务完整性：通过复合约束防止业务逻辑冲突
- 引用完整性：通过应用层而非物理外键维护关联关系

**决策指导**: 优先在数据库层面保证数据完整性，复杂业务逻辑在应用层处理

### 3. 性能原则
**核心思想**: 在查询效率和存储效率之间找到最佳平衡点

**关键要点**:
- 索引策略：为查询字段建索引，避免低基数字段单独索引
- 存储优化：选择合适的数据类型，避免空间浪费
- 查询优化：通过复合索引和部分索引优化常用查询

**决策指导**: 基于实际查询场景设计索引，定期分析慢查询并优化

### 4. 安全原则
**核心思想**: 保护敏感数据，记录操作轨迹，支持数据恢复

**关键要点**:
- 数据保护：敏感信息加密存储，密码使用哈希值
- 操作审计：记录创建者、更新者、操作时间等审计信息
- 数据恢复：支持软删除，便于数据恢复和回滚

**决策指导**: 敏感数据必须加密，重要操作必须可追溯

### 5. 可维护原则
**核心思想**: 通过文档化和标准化提高代码可读性和维护效率

**关键要点**:
- 文档化：所有表和字段都有清晰的英文注释
- 标准化：遵循行业最佳实践和团队约定
- 模块化：职责分离，便于独立维护

**决策指导**: 代码应该自解释，注释说明"为什么"而不是"做什么"

### 6. 扩展原则
**核心思想**: 设计灵活的数据结构，支持业务变化和规模增长

**关键要点**:
- 灵活性：预留扩展字段，支持业务需求变化
- 可扩展性：支持数据量增长和性能扩展
- 兼容性：保持向后兼容，支持平滑升级

**决策指导**: 在满足当前需求的前提下，为未来变化预留空间

## 实施策略

### 设计流程
1. **需求分析**: 理解业务需求和数据关系
2. **概念设计**: 抽象出实体和关系
3. **逻辑设计**: 设计表结构和约束
4. **物理设计**: 优化索引和存储
5. **验证测试**: 验证性能和完整性

### 质量保证
- **代码审查**: 检查是否遵循设计原则
- **性能测试**: 验证查询性能是否满足要求
- **数据验证**: 确保数据完整性和一致性
- **文档更新**: 保持设计文档的同步更新

## 核心决策框架

当面临设计选择时，按以下优先级考虑：

1. **数据完整性** > 性能优化
2. **一致性规范** > 个性化需求  
3. **安全性** > 便利性
4. **可维护性** > 短期效率
5. **扩展性** > 当前完美

---

**总结**: 数据库设计是一个平衡艺术，需要在多个维度之间找到最佳平衡点。遵循这些原则可以确保设计的一致性和可维护性，但更重要的是理解原则背后的思想，根据具体场景灵活应用。

